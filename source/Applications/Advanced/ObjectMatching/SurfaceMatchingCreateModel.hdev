<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="24.05.0.0">
    <procedure name="main">
        <interface/>
        <body>
            <c>*</c>
            <c>* Create a model for HALCON surface-based 3D matching algorithm from a Zivid point cloud captured by a camera.</c>
            <c>*</c>
            <c>* It should be used together with the SurfaceMatchingFindModel.hdev where the model created by this program is utilized for surface-based 3D matching algorithm.</c>
            <c>* This example comes with HDR settings and other parameters which were used to create models of the following three objects:</c>
            <c>* Twinings tea box</c>
            <c>* Pepsi can (0.3 l)</c>
            <c>* plastic Coca-Cola bottle (2 l)</c>
            <c>*</c>
            <c>* Please note that you first need to install Zivid Software and correctly set the environment variables. After this, you can access the camera with the HALCON</c>
            <c>* GenICamTL interface.</c>
            <c>*</c>
            <c/>
            <c>* Getting first available Zivid device</c>
            <l>info_framegrabber ('GenICamTL','device', Information, Devices)</l>
            <l>import './../../../Procedures'</l>
            <l>get_first_available_zivid_device (Devices, Device)</l>
            <c/>
            <c>* Connecting to Zivid camera</c>
            <l>open_framegrabber ('GenICamTL', 1, 1, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', Device, 0, 0, AcqHandle)</l>
            <c/>
            <c>* Configuring 3D-settings</c>
            <l>set_framegrabber_param (AcqHandle, 'CaptureMode', 'Capture2D3D')</l>
            <l>set_framegrabber_param (AcqHandle, 'create_objectmodel3d', 'enable')</l>
            <l>set_framegrabber_param (AcqHandle, 'add_objectmodel3d_overlay_attrib', 'enable')</l>
            <c/>
            <c>* Setting timeout for aborting a pending grab to infinity; useful for longer exposure times</c>
            <l>set_framegrabber_param (AcqHandle, 'grab_timeout', -1)</l>
            <c/>
            <c>* Switching to HDR mode (multiple acquisitions)</c>
            <l>set_framegrabber_param (AcqHandle, 'AcquisitionMode', 'MultiAcquisitionFrame')</l>
            <c/>
            <c>* Resetting any previous HDR settings</c>
            <l>set_framegrabber_param (AcqHandle, 'ResetAcquisitions', 1)</l>
            <c/>
            <c>* Setting global settings</c>
            <l>set_framegrabber_param (AcqHandle, 'Engine', 'stripe')</l>
            <l>set_framegrabber_param (AcqHandle, 'SamplingColor', 'rgb')</l>
            <l>set_framegrabber_param (AcqHandle, 'SamplingPixel', 'all')</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersSmoothingGaussianEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersSmoothingGaussianSigma', 2.0)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersNoiseRemovalEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersNoiseRemovalThreshold', 2.0)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersNoiseSuppressionEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersNoiseRepairEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersOutlierRemovalEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersOutlierRemovalThreshold', 10.0)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersReflectionRemovalEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersClusterRemovalEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersClusterRemovalMaxNeighborDistance', 6)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersClusterRemovalMinArea', 600)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersExperimentalContrastDistortionCorrectionEnabled', 0)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersExperimentalContrastDistortionRemovalEnabled', 0)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersHoleRepairEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersHoleRepairHoleSize', 0.7)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersHoleRepairStrictness', 1)</l>
            <c/>
            <c>* Configuring HDR settings</c>
            <l>set_framegrabber_param (AcqHandle, 'ExposureTime', 10000)</l>
            <l>set_framegrabber_param (AcqHandle, 'Aperture', 2.64)</l>
            <l>set_framegrabber_param (AcqHandle, 'AddAcquisition', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'Aperture', 2.64)</l>
            <l>set_framegrabber_param (AcqHandle, 'AddAcquisition', 1)</l>
            <c/>
            <c>* Capturing frame (HDR)</c>
            <l>grab_data (Image, Region, Contours, AcqHandle, ObjectModel3D_Scene)</l>
            <c/>
            <c>* Extracting the following images: X, Y, Z, SNR, and RGB</c>
            <l>select_obj (Image, X, 1)</l>
            <l>select_obj (Image, Y, 2)</l>
            <l>select_obj (Image, Z, 3)</l>
            <l>select_obj (Image, Confidence, 4)</l>
            <l>select_obj (Image, RGBA, 5)</l>
            <c/>
            <c>* Preparing graphics window</c>
            <l>dev_close_window ()</l>
            <l>WinWidth := 1920</l>
            <l>WinHeight := 1200</l>
            <l>dev_open_window (0, 0, WinWidth, WinHeight, 'black', Window3D)</l>
            <c/>
            <c>* Displaying RGB image</c>
            <l>dev_set_window (Window3D)</l>
            <l>dev_display (RGBA)</l>
            <c/>
            <c>* Using the mouse cursor to draw a region around the object</c>
            <l>dev_disp_text (['Position the mouse cursor on the edge of the object', 'Click and hold the left mouse button to begin drawing the ROI around the object', 'Release the left mouse button to end drawing the ROI', 'Click the right mouse button to continue running the program'], 'window', 'bottom', 'left', 'black', [], [])</l>
            <l>draw_region (RegionDraw, Window3D)</l>
            <c/>
            <c>* Geting min and max Z values encapsulated by the created region</c>
            <l>min_max_gray (RegionDraw, Z, 0, MinZ, MaxZ, RangeZ)</l>
            <c/>
            <c>* Segmenting Z image with Z values encapsulated by the created region</c>
            <l>threshold (Z, RegionZ, MinZ, MaxZ)</l>
            <l>reduce_domain (Z, RegionZ, Z)</l>
            <c/>
            <c>* Segmenting resulting Z image with the created region</c>
            <l>reduce_domain (Z, RegionDraw, Z)</l>
            <c/>
            <c>* Transforming 3D points from X, Y, Z images to a HALCON 3D object model</c>
            <l>xyz_to_object_model_3d (X, Y, Z, ObjectModel3D)</l>
            <c/>
            <c>* Computing normals for the HALCON 3D object model</c>
            <l>count_seconds (T0)</l>
            <l>sample_object_model_3d (ObjectModel3D, 'fast_compute_normals', 1, [], [], ObjectModel3D)</l>
            <l>count_seconds (T1)</l>
            <l>TimeForSampling := (T1 - T0)</l>
            <c/>
            <c>* Creating a HALCON surface-based matching model</c>
            <l>count_seconds (T0)</l>
            <l>create_surface_model (ObjectModel3D, 0.01, [], [], SFM)</l>
            <l>count_seconds (T1)</l>
            <l>TimeForCreating := (T1 - T0)</l>
            <c/>
            <c>* Disconnecting from Zivid Camera</c>
            <l>close_framegrabber (AcqHandle)</l>
            <c/>
            <c>* Saving the HALCON 3D object model</c>
            <l>write_object_model_3d (ObjectModel3D, 'om3', 'ObjectModel3D', [], [] )</l>
            <c/>
            <c>* Saving the HALCON surface-based matching model</c>
            <l>write_surface_model (SFM,'SFM')</l>
            <c/>
            <c>* Loading the HALCON 3D object model</c>
            <l>read_object_model_3d ('ObjectModel3D', 'm', [], [], ObjectModel3D, Status)</l>
            <c/>
            <c>* Loading the HALCON surface-based matching model</c>
            <l>read_surface_model ('SFM', SFM)</l>
            <c/>
            <c>* Displaying the 3D color point cloud, press the button to continue</c>
            <l>Instructions[0] := 'Rotate: Left button'</l>
            <l>Instructions[1] := 'Zoom:   Shift + left button'</l>
            <l>Instructions[2] := 'Move:   Ctrl  + left button'</l>
            <l>visualize_object_model_3d (Window3D, ObjectModel3D, [], [], [], [], [], [], [], PoseOut)</l>
            <c/>
            <c>* Closing graphics window</c>
            <l>dev_set_window (Window3D)</l>
            <l>dev_close_window ()</l>
        </body>
        <docu id="main">
            <parameters/>
        </docu>
    </procedure>
</hdevelop>
