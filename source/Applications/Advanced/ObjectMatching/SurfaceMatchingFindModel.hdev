<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="21.11.0.0">
    <procedure name="main">
        <interface/>
        <body>
            <c>*</c>
            <c>* Utilize surface-based 3D matching on data taken with a Zivid camera.</c>
            <c>*</c>
            <c>* The model used for matching is created from a reference view of the object, see SurfaceMatchingCreateModel.hdev or SurfaceMatchingCreateModel.hdevFromFile.</c>
            <c>* The model is then searched for in a newly captured 3D point cloud. This example comes with models for the three following objects:</c>
            <c>* Twinings tea box</c>
            <c>* Pepsi can (0.3 l)</c>
            <c>* plastic Coca-Cola bottle (2 l)</c>
            <c>*</c>
            <c>* Please note that you first need to install Zivid Software and correctly set the environment variables. After this, you can access the camera with the HALCON</c>
            <c>* GenICamTL interface.</c>
            <c>*</c>
            <c/>
            <c>* Specify whether you want to use your own model or not</c>
            <l>MySurfaceModelFile := false</l>
            <l>* MySurfaceModelFile := true</l>
            <c/>
            <c>* Specify the HALCON model for surface-based 3D matching</c>
            <c>* Existing Twinings tea box model</c>
            <l>SurfaceModelFile := 'TwiningsTeaBox'</l>
            <c>* Existing Pepsi can model</c>
            <l>* SurfaceModelFile := 'PepsiCan'</l>
            <c>* Existing Coca-Cola bottle model</c>
            <l>* SurfaceModelFile := 'CocaColaBottle'</l>
            <c>* Your own model created with the SurfaceMatchingCreateModel.hdev</c>
            <l>* SurfaceModelFile := ''</l>
            <c/>
            <l>import './../../../Procedures'</l>
            <l>get_zivid_sample_data_dir(ZividDataDir)</l>
            <l>ScenePath := ZividDataDir + '/ObjectMatching/' + SurfaceModelFile</l>
            <c/>
            <c>* Getting first available Zivid device</c>
            <l>info_framegrabber ('GenICamTL','device', Information, Devices)</l>
            <l>get_first_available_zivid_device (Devices, Device)</l>
            <c/>
            <c>* Connecting to Zivid camera</c>
            <l>open_framegrabber ('GenICamTL', 1, 1, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', Device, 0, 0, AcqHandle)</l>
            <c/>
            <c>* Configuring 3D-settings</c>
            <l>set_framegrabber_param (AcqHandle, 'create_objectmodel3d', 'enable')</l>
            <l>set_framegrabber_param (AcqHandle, 'add_objectmodel3d_overlay_attrib', 'enable')</l>
            <c/>
            <c>* Seting the timeout for aborting a pending grab to infinity; useful for longer exposure times</c>
            <l>set_framegrabber_param (AcqHandle, 'grab_timeout', -1)</l>
            <c/>
            <c>* Switching to HDR mode (multiple acquisitions)</c>
            <l>set_framegrabber_param (AcqHandle, 'AcquisitionMode', 'MultiAcquisitionFrame')</l>
            <c/>
            <c>* Reseting any previous HDR settings</c>
            <l>set_framegrabber_param (AcqHandle, 'ResetAcquisitions', 1)</l>
            <c/>
            <c>* Setting global settings</c>
            <l>set_framegrabber_param (AcqHandle, 'Engine', 'omni')</l>
            <l>set_framegrabber_param (AcqHandle, 'SamplingColor', 'rgb')</l>
            <l>set_framegrabber_param (AcqHandle, 'SamplingPixel', 'blueSubsample2x2')</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersSmoothingGaussianEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersSmoothingGaussianSigma', 2.0)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersNoiseRemovalEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersNoiseRemovalThreshold', 2.0)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersNoiseSuppressionEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersNoiseRepairEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersOutlierRemovalEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersOutlierRemovalThreshold', 10.0)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersReflectionRemovalEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersClusterRemovalEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersClusterRemovalMaxNeighborDistance', 6)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersClusterRemovalMinArea', 600)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersExperimentalContrastDistortionCorrectionEnabled', 0)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersExperimentalContrastDistortionRemovalEnabled', 0)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersHoleRepairEnabled', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersHoleRepairHoleSize', 0.7)</l>
            <l>set_framegrabber_param (AcqHandle, 'ProcessingFiltersHoleRepairStrictness', 1)</l>
            <c/>
            <c>* Configuring HDR settings</c>
            <l>set_framegrabber_param (AcqHandle, 'ExposureTime', 10000)</l>
            <l>set_framegrabber_param (AcqHandle, 'Aperture', 2.64)</l>
            <l>set_framegrabber_param (AcqHandle, 'AddAcquisition', 1)</l>
            <l>set_framegrabber_param (AcqHandle, 'Aperture', 2.64)</l>
            <l>set_framegrabber_param (AcqHandle, 'AddAcquisition', 1)</l>
            <c/>
            <c>* Loading the HALCON model for surface-based 3D matching</c>
            <l>if (MySurfaceModelFile)</l>
            <l>    SFMFilename := 'SFM'</l>
            <l>else</l>
            <l>    tuple_add(ScenePath,'/SFM', SFMFilename)</l>
            <l>endif</l>
            <l>read_surface_model (SFMFilename, SFM)</l>
            <c/>
            <c>* Loading the HALCON 3D object model (used for visualization purpose)</c>
            <l>if (MySurfaceModelFile)</l>
            <l>    ObjectModel3DFilename := 'ObjectModel3D'</l>
            <l>else</l>
            <l>    tuple_add(ScenePath,'/ObjectModel3D', ObjectModel3DFilename)</l>
            <l>endif</l>
            <l>read_object_model_3d (ObjectModel3DFilename, 'm', [], [], ObjectModel3D, Status)</l>
            <c/>
            <c/>
            <c>* Preparing the graphics window</c>
            <l>dev_close_window ()</l>
            <l>WinWidth := 1920</l>
            <l>WinHeight := 1200</l>
            <l>dev_open_window (0, 0, WinWidth, WinHeight, 'black', Window3D)</l>
            <c/>
            <l>for Index := 1 to 10 by 1</l>
            <c/>
            <c>    * Capturing frame (HDR)</c>
            <l>    grab_data (Image, Region, Contours, AcqHandle, ObjectModel3DSceneRaw)</l>
            <c/>
            <c>    * Extracting the following images: X, Y, Z, SNR, and RGB</c>
            <l>    select_obj (Image, X, 1)</l>
            <l>    select_obj (Image, Y, 2)</l>
            <l>    select_obj (Image, Z, 3)</l>
            <l>    select_obj (Image, Confidence, 4)</l>
            <l>    select_obj (Image, RGBA, 5)</l>
            <c/>
            <c>    * Converting to HALCON 3D object model</c>
            <l>    xyz_to_object_model_3d (X, Y, Z, ObjectModel3DScene)</l>
            <c/>
            <c>    * Computing 3D object model normals, which is necessary for surface-based 3D matching</c>
            <l>    count_seconds (T0)</l>
            <l>    sample_object_model_3d (ObjectModel3DScene, 'fast_compute_normals', 1, [], [], ObjectModel3DScene)</l>
            <l>    count_seconds (T1)</l>
            <l>    TimeForSampling := (T1 - T0)     </l>
            <c/>
            <c>    * Object detection and pose estimation based on surface-based 3D matching</c>
            <l>    count_seconds (T0)</l>
            <c>    * RelSamplingDistance - point cloud downsampling (0 = no downsampling)</c>
            <c>    * Twinings tea box</c>
            <l>    if (SurfaceModelFile = 'TwiningsTeaBox')</l>
            <l>        RelSamplingDistance := 0.03</l>
            <l>    endif</l>
            <c>    * Pepsi can</c>
            <l>    if (SurfaceModelFile = 'PepsiCan')</l>
            <l>        RelSamplingDistance := 0.01</l>
            <l>    endif</l>
            <c>    * Coca-Cola bottle</c>
            <l>    if (SurfaceModelFile = 'CocaColaBottle')</l>
            <l>        RelSamplingDistance := 0.02</l>
            <l>    endif</l>
            <c>    * Your own model created with the SurfaceMatchingCreateModel.hdev</c>
            <l>    if (SurfaceModelFile = '')</l>
            <l>        RelSamplingDistance := 0.01</l>
            <l>    endif</l>
            <c>    * KeyPointFraction - additional downsampling for the detection (1 = all points used)</c>
            <l>    KeyPointFraction := 1</l>
            <c>    * MinScore - minimum score for the detection</c>
            <l>    MinScore := 0.4</l>
            <l>    find_surface_model (SFM, ObjectModel3DScene, RelSamplingDistance, KeyPointFraction, MinScore, 'true', ['num_matches', 'scene_normal_computation'], [10, 'mls'], Pose,  Score, SurfaceMatchingResultID)</l>
            <l>    count_seconds (T1)</l>
            <l>    TimeForMatching := (T1 - T0)</l>
            <c/>
            <l>    if (Score!=[])</l>
            <c/>
            <c>        * Preparing result(s)</c>
            <l>        if (Score[0] &lt; MinScore)</l>
            <l>            continue</l>
            <l>        endif    </l>
            <l>        CPose := Pose[0:6]</l>
            <l>        rigid_trans_object_model_3d (ObjectModel3D, CPose, ObjectModel3DResult)</l>
            <c/>
            <c>        * Visualizing matching scene and key points</c>
            <l>        Message := 'Original scene points (white)'</l>
            <l>        Message[1] := 'Sampled scene points (cyan)'</l>
            <l>        Message[2] := 'Key points (yellow)'</l>
            <l>        get_surface_matching_result (SurfaceMatchingResultID, 'sampled_scene', [], SampledScene)</l>
            <l>        get_surface_matching_result (SurfaceMatchingResultID, 'key_points', [], KeyPoints)</l>
            <l>        dev_clear_window ()</l>
            <l>        Message[3] := ' '</l>
            <l>        Message[4] := 'Rotate: Left button'</l>
            <l>        Message[5] := 'Zoom:   Shift + left button'</l>
            <l>        Message[6] := 'Move:   Ctrl  + left button'</l>
            <l>        visualize_object_model_3d (Window3D, [ObjectModel3DScene,SampledScene,KeyPoints], [], [], ['color_' + [0,1,2],'point_size_' + [0,1,2]], ['gray','cyan','yellow',1.0,3.0,5.0], Message, [], Message, PoseOut)</l>
            <c/>
            <c>        * Visualizing result(s)</c>
            <l>        Message1 := 'Scene: ' + Index</l>
            <l>        Message1[1] := 'Found ' + |ObjectModel3DResult| + ' object(s) in ' + TimeForMatching$'.3' + ' ms'</l>
            <l>        ScoreString := sum(Score$'.2f' + ' / ')</l>
            <l>        Message1[2] := 'Score(s): ' + ScoreString{0:strlen(ScoreString) - 4}</l>
            <l>        NumResult := |ObjectModel3DResult|</l>
            <l>        tuple_gen_const (NumResult, 'green', Colors)</l>
            <l>        tuple_gen_const (NumResult, 'circle', Shapes)</l>
            <l>        tuple_gen_const (NumResult, 3, Radii)</l>
            <l>        Indices := [1:NumResult]</l>
            <l>        dev_clear_window ()</l>
            <l>        Instructions[0] := 'Rotate: Left button'</l>
            <l>        Instructions[1] := 'Zoom:   Shift + left button'</l>
            <l>        Instructions[2] := 'Move:   Ctrl  + left button'</l>
            <l>        visualize_object_model_3d (Window3D, [ObjectModel3DScene,ObjectModel3DResult], [], [], ['color_' + [0,Indices],'point_size_0'], ['gray',Colors,1.0], Message1, [], Instructions, PoseOut)</l>
            <c/>
            <c>        * Clear: Free result(s)</c>
            <l>        clear_object_model_3d (ObjectModel3DScene)</l>
            <l>        clear_object_model_3d (ObjectModel3DResult)</l>
            <l>        clear_object_model_3d (SampledScene)</l>
            <l>        clear_object_model_3d (KeyPoints)</l>
            <l>        clear_surface_matching_result (SurfaceMatchingResultID)</l>
            <c/>
            <l>    endif</l>
            <c/>
            <l>endfor</l>
            <c/>
            <c>* Disconnecting from Zivid Camera</c>
            <l>close_framegrabber (AcqHandle)</l>
            <c/>
            <c>* Closing graphics window</c>
            <l>dev_set_window (Window3D)</l>
            <l>dev_close_window ()</l>
        </body>
        <docu id="main">
            <parameters/>
        </docu>
    </procedure>
</hdevelop>
