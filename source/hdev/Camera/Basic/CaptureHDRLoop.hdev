<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="19.11.0.0">
<procedure name="main">
<interface/>
<body>
<c>* </c>
<c>* Example for the usage of a Zivid 3D camera in HALCON</c>
<c>* </c>
<c>* This example shows how to acquire HDR images from the camera</c>
<c>* in a loop (while actively changing some HDR settings). Each</c>
<c>* HDR image is used to generate a HALCON ObjectModel3D</c>
<c>* which is then visualized.</c>
<c>* </c>
<c>* Please note that you first need to install Zivid Software and</c>
<c>* correctly set the environment variables. After this, you can</c>
<c>* access the camera with the HALCON GenICamTL interface.</c>
<c>*</c>
<c></c>
<c>* Preparing the graphics window</c>
<l>dev_close_window ()</l>
<l>WinWidth := 960</l>
<l>WinHeight := 800</l>
<l>dev_open_window (0, 0, WinWidth, WinHeight, 'blue', Window3D)</l>
<c></c>
<c>*Get first available Zivid device</c>
<l>info_framegrabber ('GenICamTL','device', Information, Devices)</l>
<l>import './../../Procedures'</l>
<l>get_first_available_zivid_device (Devices, Device)</l>
<l>get_zivid_sample_data_dir(ZividDataDir)</l>
<c></c>
<c>* Connecting to the Zivid camera</c>
<l>open_framegrabber ('GenICamTL', 1, 1, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', Device, 0, 0, AcqHandle)</l>
<c></c>
<c>* Configuring 3D-settings</c>
<l>set_framegrabber_param (AcqHandle, 'create_objectmodel3d', 'enable')</l>
<l>set_framegrabber_param (AcqHandle, 'add_objectmodel3d_overlay_attrib', 'enable')</l>
<c></c>
<c>* Seting the timeout for aborting a pending grab to infinity; useful for longer exposure times</c>
<l>set_framegrabber_param (AcqHandle, 'grab_timeout', -1)</l>
<c></c>
<c>* Switching to the HDR mode</c>
<l>set_framegrabber_param (AcqHandle, 'AcquisitionMode', 'MultiAcquisitionFrame')</l>
<c></c>
<l>for Index := 0 to 2 by 1</l>
<c>    </c>
<c>    * Reseting any previous HDR settings</c>
<l>    set_framegrabber_param (AcqHandle, 'ResetAcquisitions', 1)</l>
<c>    </c>
<c>    * Configuring HDR settings for frames</c>
<l>    set_settings (AcqHandle, ZividDataDir + '/SettingsJson/Settings0'+(Index+1)+'.json')</l>
<c>      </c>
<c>    * Capturing frame (HDR)</c>
<l>    grab_data (Image, Region, Contours, AcqHandle, ObjectModel3D)</l>
<c>    </c>
<c>    * Displaying the 3D color point cloud, press the button to continue</c>
<l>    Instructions[0] := 'Rotate: Left button'</l>
<l>    Instructions[1] := 'Zoom:   Shift + left button'</l>
<l>    Instructions[2] := 'Move:   Ctrl  + left button'</l>
<l>    visualize_object_model_3d (Window3D, ObjectModel3D, [], [], ['red_channel_attrib','green_channel_attrib','blue_channel_attrib'], ['&amp;overlay_red','&amp;overlay_green','&amp;overlay_blue'], [], [], [Instructions], PoseOut)</l>
<c></c>
<l>endfor</l>
<c></c>
<c>* Disconnecting from the Zivid Camera</c>
<l>close_framegrabber (AcqHandle)</l>
<c></c>
<c>* Closing the graphics window</c>
<l>dev_close_window ()</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="set_settings">
<interface>
<ic>
<par name="AcqHandle" base_type="ctrl" dimension="0"/>
<par name="path" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>    </c>
<l>    read_dict(path, [], [], json_dict)</l>
<c>    </c>
<l>    get_dict_param (json_dict, 'keys', [], AllKeys)</l>
<l>    get_dict_tuple (json_dict, 'Settings', settings)</l>
<l>    get_dict_tuple (settings, 'Frames', frames)</l>
<c>    </c>
<c>    * Get settings for first frame</c>
<l>    get_dict_tuple (frames, 0, firstFrame)</l>
<l>    get_dict_tuple (firstFrame, 'Frame', frame)</l>
<l>    get_dict_tuple (frame, 'ExposureTime', exposure_time)</l>
<l>    set_framegrabber_param (AcqHandle, 'ExposureTime', exposure_time)</l>
<l>    get_dict_tuple (frame, 'Aperture', aperture)</l>
<l>    set_framegrabber_param (AcqHandle, 'Aperture', aperture)</l>
<l>    get_dict_tuple (frame, 'Brightness', brightness)</l>
<l>    set_framegrabber_param (AcqHandle, 'Brightness', brightness)</l>
<l>    get_dict_tuple (frame, 'Gain', gain)</l>
<l>    set_framegrabber_param (AcqHandle, 'Gain', gain)</l>
<l>    get_dict_tuple (frame, 'Bidirectional', bidirectional)</l>
<l>    set_framegrabber_param (AcqHandle, 'PatternsSineBidirectional', bidirectional)</l>
<c>    </c>
<c>    </c>
<c>    * Get settigns for second frame</c>
<l>    get_dict_tuple (frames, 1, secondFrame)</l>
<l>    get_dict_tuple (secondFrame, 'Frame', frame)</l>
<l>    get_dict_tuple (frame, 'ExposureTime', exposure_time)</l>
<l>    set_framegrabber_param (AcqHandle, 'ExposureTime', exposure_time)</l>
<l>    get_dict_tuple (frame, 'Aperture', aperture)</l>
<l>    set_framegrabber_param (AcqHandle, 'Aperture', aperture)</l>
<l>    get_dict_tuple (frame, 'Brightness', brightness)</l>
<l>    set_framegrabber_param (AcqHandle, 'Brightness', brightness)</l>
<l>    get_dict_tuple (frame, 'Gain', gain)</l>
<l>    set_framegrabber_param (AcqHandle, 'Gain', gain)</l>
<l>    get_dict_tuple (frame, 'Bidirectional', bidirectional)</l>
<l>    set_framegrabber_param (AcqHandle, 'PatternsSineBidirectional', bidirectional)</l>
<c>    </c>
<c>    </c>
<c>    * Get settings for third frame</c>
<l>    get_dict_tuple (frames, 2, thirdFrame)</l>
<l>    get_dict_tuple (thirdFrame, 'Frame', frame)</l>
<l>    get_dict_tuple (frame, 'ExposureTime', exposure_time)</l>
<l>    set_framegrabber_param (AcqHandle, 'ExposureTime', exposure_time)</l>
<l>    get_dict_tuple (frame, 'Aperture', aperture)</l>
<l>    set_framegrabber_param (AcqHandle, 'Aperture', aperture)</l>
<l>    get_dict_tuple (frame, 'Brightness', brightness)</l>
<l>    set_framegrabber_param (AcqHandle, 'Brightness', brightness)</l>
<l>    get_dict_tuple (frame, 'Gain', gain)</l>
<l>    set_framegrabber_param (AcqHandle, 'Gain', gain)</l>
<l>    get_dict_tuple (frame, 'Bidirectional', bidirectional)</l>
<l>    set_framegrabber_param (AcqHandle, 'PatternsSineBidirectional', bidirectional)</l>
<c>    </c>
<c>    * Get filter settings</c>
<l>    get_dict_tuple (settings, 'Processing', globalSettings)</l>
<l>    get_dict_tuple (globalSettings, 'Filters', filters)</l>
<c>    </c>
<l>    get_dict_tuple (filters, 'Contrast', contrast)</l>
<l>    get_dict_tuple (contrast, 'Removal', removal)</l>
<l>    get_dict_tuple (removal, 'Enabled', enabled)</l>
<l>    set_framegrabber_param (AcqHandle, 'ProcessingFiltersNoiseRemovalEnabled', enabled)</l>
<l>    get_dict_tuple (removal, 'Threshold', threshold)</l>
<l>    set_framegrabber_param (AcqHandle, 'ProcessingFiltersNoiseRemovalThreshold', threshold)</l>
<c>    </c>
<l>    get_dict_tuple (filters, 'Smoothing', smoothing)</l>
<l>    get_dict_tuple (smoothing, 'Gaussian', gaussian)</l>
<l>    get_dict_tuple (gaussian, 'Enabled', enabled)</l>
<l>    set_framegrabber_param (AcqHandle, 'ProcessingFiltersSmoothingGaussianEnabled', enabled)</l>
<l>    get_dict_tuple (gaussian, 'Sigma', sigma)</l>
<l>    set_framegrabber_param (AcqHandle, 'ProcessingFiltersSmoothingGaussianSigma', sigma)</l>
<c>    </c>
<l>    get_dict_tuple (filters, 'Outlier', outlier)</l>
<l>    get_dict_tuple (outlier, 'Removal', removal)</l>
<l>    get_dict_tuple (removal, 'Enabled', enabled)</l>
<l>    set_framegrabber_param (AcqHandle, 'ProcessingFiltersOutlierRemovalEnabled', enabled)</l>
<l>    get_dict_tuple (removal, 'Threshold', threshold)</l>
<l>    set_framegrabber_param (AcqHandle, 'ProcessingFiltersOutlierRemovalThreshold', threshold)</l>
<c>    </c>
<l>    get_dict_tuple (filters, 'Reflection', reflection)</l>
<l>    get_dict_tuple (reflection, 'Removal', removal)</l>
<l>    get_dict_tuple (removal, 'Enabled', enabled)</l>
<l>    set_framegrabber_param (AcqHandle, 'ProcessingFiltersReflectionRemovalEnabled', enabled)</l>
<c>    </c>
<c>    * Get color balance settings</c>
<l>    get_dict_tuple (globalSettings, 'Color', color)</l>
<l>    get_dict_tuple (color, 'Balance', colorbalance)</l>
<l>    get_dict_tuple (colorbalance, 'Blue', blue)</l>
<l>    set_framegrabber_param (AcqHandle, 'ProcessingColorBalanceBlue', blue)</l>
<l>    get_dict_tuple (colorbalance, 'Green', green)</l>
<l>    set_framegrabber_param (AcqHandle, 'ProcessingColorBalanceGreen', green)</l>
<l>    get_dict_tuple (colorbalance, 'Red', red)</l>
<l>    set_framegrabber_param (AcqHandle, 'ProcessingColorBalanceRed', red)</l>
<c></c>
<l>    set_framegrabber_param (AcqHandle, 'AddAcquisition', 1)</l>
<c>    </c>
<l>return ()</l>
</body>
<docu id="set_settings">
<parameters>
<parameter id="AcqHandle"/>
<parameter id="path"/>
</parameters>
</docu>
</procedure>
</hdevelop>
