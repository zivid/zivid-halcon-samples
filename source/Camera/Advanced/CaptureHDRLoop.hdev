<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="21.11.0.0">
    <procedure name="main">
        <interface/>
        <body>
            <c>*</c>
            <c>* Capture HDR images from the camera in a loop (while actively changing some HDR settings).</c>
            <c>*</c>
            <c>* Each HDR image is used to generate a HALCON ObjectModel3D which is then visualized.</c>
            <c>*</c>
            <c>* Please note that you first need to install Zivid Software and correctly set the environment variables. After this, you can access the camera with the HALCON</c>
            <c>* GenICamTL interface.</c>
            <c>*</c>
            <c/>
            <c>* Preparing the graphics window</c>
            <l>dev_close_window ()</l>
            <l>WinWidth := 960</l>
            <l>WinHeight := 800</l>
            <l>dev_open_window (0, 0, WinWidth, WinHeight, 'blue', Window3D)</l>
            <c/>
            <c>*Getting first available Zivid device</c>
            <l>info_framegrabber ('GenICamTL','device', Information, Devices)</l>
            <l>import './../../Procedures'</l>
            <l>get_first_available_zivid_device (Devices, Device)</l>
            <l>get_zivid_sample_data_dir(ZividDataDir)</l>
            <c/>
            <c>* Connecting to Zivid camera</c>
            <l>open_framegrabber ('GenICamTL', 1, 1, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', Device, 0, 0, AcqHandle)</l>
            <l>get_framegrabber_param (AcqHandle, 'DeviceModelName', DeviceModelName)</l>
            <l>get_zivid_model_folder_name (DeviceModelName, DeviceModelFolder)</l>
            <c/>
            <c>* Configuring 3D-settings</c>
            <l>set_framegrabber_param (AcqHandle, 'create_objectmodel3d', 'enable')</l>
            <l>set_framegrabber_param (AcqHandle, 'add_objectmodel3d_overlay_attrib', 'enable')</l>
            <c/>
            <c>* Seting the timeout for aborting a pending grab to infinity; useful for longer exposure times</c>
            <l>set_framegrabber_param (AcqHandle, 'grab_timeout', -1)</l>
            <c/>
            <c>* Switching to HDR mode (multiple acquisitions)</c>
            <l>set_framegrabber_param (AcqHandle, 'AcquisitionMode', 'MultiAcquisitionFrame')</l>
            <c/>
            <l>for Index := 0 to 2 by 1</l>
            <c/>
            <c>    * Reseting any previous HDR settings</c>
            <l>    set_framegrabber_param (AcqHandle, 'ResetAcquisitions', 1)</l>
            <c/>
            <c>    * Configuring HDR settings for frames</c>
            <l>    read_dict (ZividDataDir + '/SettingsJson/' + DeviceModelFolder + '/Settings01.json', [], [], JsonSettings)</l>
            <l>    read_zivid_json_params (AcqHandle, JsonSettings)</l>
            <c/>
            <c>    * Capturing frame (HDR)</c>
            <l>    grab_data (Image, Region, Contours, AcqHandle, ObjectModel3D)</l>
            <c/>
            <c>    * Displaying 3D color point cloud, press the button to continue</c>
            <l>    Instructions[0] := 'Rotate: Left button'</l>
            <l>    Instructions[1] := 'Zoom:   Shift + left button'</l>
            <l>    Instructions[2] := 'Move:   Ctrl  + left button'</l>
            <l>    visualize_object_model_3d (Window3D, ObjectModel3D, [], [], ['red_channel_attrib','green_channel_attrib','blue_channel_attrib'], ['&amp;overlay_red','&amp;overlay_green','&amp;overlay_blue'], [], [], [Instructions], PoseOut)</l>
            <c/>
            <l>endfor</l>
            <c/>
            <c>* Disconnecting from Zivid Camera</c>
            <l>close_framegrabber (AcqHandle)</l>
            <c/>
            <c>* Closing graphics window</c>
            <l>dev_close_window ()</l>
            <c/>
        </body>
        <docu id="main">
            <parameters/>
        </docu>
    </procedure>
    <procedure name="set_settings">
        <interface>
            <ic>
                <par name="AcqHandle" base_type="ctrl" dimension="0"/>
                <par name="path" base_type="ctrl" dimension="0"/>
            </ic>
        </interface>
        <body>
            <l>    read_dict(path, [], [], json_dict)</l>
            <c>    </c>
            <l>    get_dict_tuple (json_dict, 'Settings', Settings)</l>
            <l>    get_dict_tuple (Settings, 'Acquisitions', Acquisitions)</l>
            <l>    get_dict_param (Acquisitions, 'keys', [], AllKeys)</l>
            <c>    </c>
            <c>    * Getting acquisition settings</c>
            <l>    for Index := 0 to |AllKeys| - 1 by 1</l>
            <l>        get_dict_tuple (Acquisitions, Index, AcquisitionIndex)</l>
            <l>        get_dict_tuple (AcquisitionIndex, 'Acquisition', Acquisition)</l>
            <l>        get_dict_tuple (Acquisition, 'ExposureTime', ExposureTime)</l>
            <l>        set_framegrabber_param (AcqHandle, 'ExposureTime', ExposureTime)</l>
            <l>        get_dict_tuple (Acquisition, 'Aperture', Aperture)</l>
            <l>        set_framegrabber_param (AcqHandle, 'Aperture', Aperture)</l>
            <l>        get_dict_tuple (Acquisition, 'Brightness', Brightness)</l>
            <l>        set_framegrabber_param (AcqHandle, 'Brightness', Brightness)</l>
            <l>        get_dict_tuple (Acquisition, 'Gain', Gain)</l>
            <l>        set_framegrabber_param (AcqHandle, 'Gain', Gain)</l>
            <l>        set_framegrabber_param (AcqHandle, 'AddAcquisition', 1)</l>
            <c/>
            <l>    endfor</l>
            <c>    </c>
            <c>    * Getting filter settings</c>
            <l>    get_dict_tuple (Settings, 'Processing', Processing)</l>
            <l>    get_dict_tuple (Processing, 'Filters', Filters)</l>
            <c>    </c>
            <l>    get_dict_tuple (Filters, 'Noise', Noise)</l>
            <l>    get_dict_tuple (Noise, 'Removal', Removal)</l>
            <l>    get_dict_tuple (Removal, 'Enabled', Enabled)</l>
            <l>    set_framegrabber_param (AcqHandle, 'ProcessingFiltersNoiseRemovalEnabled', Enabled)</l>
            <l>    get_dict_tuple (Removal, 'Threshold', Threshold)</l>
            <l>    set_framegrabber_param (AcqHandle, 'ProcessingFiltersNoiseRemovalThreshold', Threshold)</l>
            <c>    </c>
            <l>    get_dict_tuple (Filters, 'Smoothing', Smoothing)</l>
            <l>    get_dict_tuple (Smoothing, 'Gaussian', Gaussian)</l>
            <l>    get_dict_tuple (Gaussian, 'Enabled', Enabled)</l>
            <l>    set_framegrabber_param (AcqHandle, 'ProcessingFiltersSmoothingGaussianEnabled', Enabled)</l>
            <l>    get_dict_tuple (Gaussian, 'Sigma', Sigma)</l>
            <l>    set_framegrabber_param (AcqHandle, 'ProcessingFiltersSmoothingGaussianSigma', Sigma)</l>
            <c>    </c>
            <l>    get_dict_tuple (Filters, 'Outlier', Outlier)</l>
            <l>    get_dict_tuple (Outlier, 'Removal', Removal)</l>
            <l>    get_dict_tuple (Removal, 'Enabled', Enabled)</l>
            <l>    set_framegrabber_param (AcqHandle, 'ProcessingFiltersOutlierRemovalEnabled', Enabled)</l>
            <l>    get_dict_tuple (Removal, 'Threshold', Threshold)</l>
            <l>    set_framegrabber_param (AcqHandle, 'ProcessingFiltersOutlierRemovalThreshold', Threshold)</l>
            <c>    </c>
            <l>    get_dict_tuple (Filters, 'Reflection', Reflection)</l>
            <l>    get_dict_tuple (Reflection, 'Removal', Removal)</l>
            <l>    get_dict_tuple (Removal, 'Enabled', Enabled)</l>
            <l>    set_framegrabber_param (AcqHandle, 'ProcessingFiltersReflectionRemovalEnabled', Enabled)</l>
            <c>    </c>
            <c>    </c>
            <c>    * Getting color balance settings</c>
            <l>    get_dict_tuple (Processing, 'Color', Color)</l>
            <l>    get_dict_tuple (Color, 'Balance', Balance)</l>
            <l>    get_dict_tuple (Balance, 'Blue', Blue)</l>
            <l>    set_framegrabber_param (AcqHandle, 'ProcessingColorBalanceBlue', Blue)</l>
            <l>    get_dict_tuple (Balance, 'Green', Green)</l>
            <l>    set_framegrabber_param (AcqHandle, 'ProcessingColorBalanceGreen', Green)</l>
            <l>    get_dict_tuple (Balance, 'Red', Red)</l>
            <l>    set_framegrabber_param (AcqHandle, 'ProcessingColorBalanceRed', Red)</l>
            <c/>
            <c>    </c>
            <l>return ()</l>
        </body>
        <docu id="set_settings">
            <parameters>
                <parameter id="AcqHandle"/>
                <parameter id="path"/>
            </parameters>
        </docu>
    </procedure>
</hdevelop>
